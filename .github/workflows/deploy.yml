name: 버전 태깅 자동화

on:
  pull_request:
    branches: [main]
    types: [closed] # PR이 머지될 때만 작동

jobs:
  bump-version-and-release:
    if: github.event.pull_request.merged == true
    name: 버전 업데이트 및 릴리스 생성
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.split_and_bump.outputs.new_tag }}
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4

      - name: 최신 버전 태그 가져오기
        id: get_latest
        run: |
          git fetch --tags
          TAG=$(git tag --sort=-v:refname | head -n 1)
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: 버전 업데이트 처리
        id: split_and_bump
        run: |
          VERSION=${{ env.LATEST_TAG }}
          VERSION="${VERSION#v}" # 'v' 제거
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          LABELS_JSON='${{ toJson(github.event.pull_request.labels) }}'
          LABEL_NAMES=$(echo "$LABELS_JSON" | jq -r '.[].name')

          VERSION_TYPE=""
          for label in $LABEL_NAMES; do
            if [[ "$label" == "major" ]]; then
              VERSION_TYPE="major"
            elif [[ "$label" == "minor" ]]; then
              VERSION_TYPE="minor"
            elif [[ "$label" == "patch" ]]; then
              VERSION_TYPE="patch"
            fi
          done

          if [[ -z "$VERSION_TYPE" ]]; then
            echo "❌ 유효한 버전 라벨이 없습니다."
            exit 1
          fi

          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Git 태그 생성 및 푸시
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: GitHub 릴리스 생성
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: 릴리스 ${{ env.NEW_TAG }}
          body: |
            🔖 PR 번호: #${{ github.event.pull_request.number }}
            🔧 작성자: @${{ github.event.pull_request.user.login }}
            📝 변경사항: ${{ github.event.pull_request.title }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-image-and-push:
    name: 도커 이미지 빌드와 푸시
    needs: bump-version-and-release
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: app20250317
    outputs:
      DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
      OWNER_LC: ${{ env.OWNER_LC }}
    steps:
      - uses: actions/checkout@v4

      - name: application-secret.yml 생성
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v3

      - name: 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        run: echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
        env:
          OWNER: "${{ github.repository_owner }}"

      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.bump-version-and-release.outputs.tag_name }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest
